#pragma once
#include "../jRHIType.h"

GENERATE_CONVERSION_FUNCTION(GetDX12TextureFormat,
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB8, DXGI_FORMAT_R8G8B8A8_UNORM),                      // not support rgb8 -> rgba8
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB32F, DXGI_FORMAT_R32G32B32A32_FLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB16F, DXGI_FORMAT_R16G16B16A16_FLOAT),                // not support rgb16 -> rgba16
    CONVERSION_TYPE_ELEMENT(ETextureFormat::R11G11B10F, DXGI_FORMAT_R11G11B10_FLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8, DXGI_FORMAT_R8G8B8A8_UNORM),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA16F, DXGI_FORMAT_R16G16B16A16_FLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA32F, DXGI_FORMAT_R32G32B32A32_FLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8SI, DXGI_FORMAT_R8G8B8A8_SINT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8UI, DXGI_FORMAT_R8G8B8A8_UINT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::BGRA8, DXGI_FORMAT_B8G8R8A8_UNORM),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::R8, DXGI_FORMAT_R8_UNORM),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::R16F, DXGI_FORMAT_R16_FLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::R32F, DXGI_FORMAT_R32_FLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::R8UI, DXGI_FORMAT_R8_UINT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::R32UI, DXGI_FORMAT_R32_UINT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RG8, DXGI_FORMAT_R8G8_UNORM),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RG16F, DXGI_FORMAT_R16G16_FLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RG32F, DXGI_FORMAT_R32G32_FLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::D16, DXGI_FORMAT_D16_UNORM),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::D16_S8, DXGI_FORMAT_D24_UNORM_S8_UINT),                 // not support d16_s8 -> d24_s8
    CONVERSION_TYPE_ELEMENT(ETextureFormat::D24, DXGI_FORMAT_D24_UNORM_S8_UINT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::D24_S8, DXGI_FORMAT_D24_UNORM_S8_UINT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::D32, DXGI_FORMAT_D32_FLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::D32_S8, DXGI_FORMAT_D32_FLOAT))

FORCEINLINE auto GetDX12TextureComponentCount(ETextureFormat type)
{
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB8, 4),                       // not support rgb8 -> rgba8
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB32F, 3),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB16F, 4),                     // not support rgb16 -> rgba16
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R11G11B10F, 3),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA16F, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA32F, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8SI, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8UI, 4),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::BGRA8, 4),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::R8, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R16F, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R32F, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R8UI, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R32UI, 1),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::RG8, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RG16F, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RG32F, 2),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::D16, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D16_S8, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D24, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D24_S8, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D32, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D32_S8, 2)
    );
}

FORCEINLINE auto GetDX12TexturePixelSize(ETextureFormat type)
{
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB8, 4),                       // not support rgb8 -> rgba8
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB32F, 12),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB16F, 8),                     // not support rgb16 -> rgba16
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R11G11B10F, 4),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA16F, 8),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA32F, 16),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8SI, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8UI, 4),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::BGRA8, 4),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::R8, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R16F, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R32F, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R8UI, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R32UI, 4),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::RG8, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RG16F, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RG32F, 4),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::D16, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D16_S8, 3),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D24, 3),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D24_S8, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D32, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D32_S8, 5)
    );
}

GENERATE_CONVERSION_FUNCTION(GetDX12TextureDemension,
    CONVERSION_TYPE_ELEMENT(ETextureType::TEXTURE_2D, D3D12_RESOURCE_DIMENSION_TEXTURE2D),
    CONVERSION_TYPE_ELEMENT(ETextureType::TEXTURE_2D_ARRAY, D3D12_RESOURCE_DIMENSION_TEXTURE2D),
    CONVERSION_TYPE_ELEMENT(ETextureType::TEXTURE_CUBE, D3D12_RESOURCE_DIMENSION_TEXTURE2D))            // CubeMap is Texture2D for DX12

GENERATE_CONVERSION_FUNCTION(GetDX12DescriptorHeapType,
    CONVERSION_TYPE_ELEMENT(EDescriptorHeapTypeDX12::CBV_SRV_UAV, D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV),
    CONVERSION_TYPE_ELEMENT(EDescriptorHeapTypeDX12::SAMPLER, D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER),
    CONVERSION_TYPE_ELEMENT(EDescriptorHeapTypeDX12::RTV, D3D12_DESCRIPTOR_HEAP_TYPE_RTV),
    CONVERSION_TYPE_ELEMENT(EDescriptorHeapTypeDX12::DSV, D3D12_DESCRIPTOR_HEAP_TYPE_DSV))

GENERATE_CONVERSION_FUNCTION(GetDX12ShaderBindingType,
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::UNIFORMBUFFER, D3D12_DESCRIPTOR_RANGE_TYPE_CBV),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::UNIFORMBUFFER_DYNAMIC, D3D12_DESCRIPTOR_RANGE_TYPE_CBV),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::TEXTURE_SAMPLER_SRV, D3D12_DESCRIPTOR_RANGE_TYPE_SRV),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::TEXTURE_SRV, D3D12_DESCRIPTOR_RANGE_TYPE_SRV),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::TEXTURE_UAV, D3D12_DESCRIPTOR_RANGE_TYPE_UAV),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::TEXTURE_ARRAY_SRV, D3D12_DESCRIPTOR_RANGE_TYPE_SRV),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::SAMPLER, D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::BUFFER_SRV, D3D12_DESCRIPTOR_RANGE_TYPE_SRV),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::BUFFER_UAV, D3D12_DESCRIPTOR_RANGE_TYPE_UAV),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::BUFFER_UAV_DYNAMIC, D3D12_DESCRIPTOR_RANGE_TYPE_UAV),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::BUFFER_TEXEL_SRV, D3D12_DESCRIPTOR_RANGE_TYPE_SRV),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::BUFFER_TEXEL_UAV, D3D12_DESCRIPTOR_RANGE_TYPE_UAV),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::SUBPASS_INPUT_ATTACHMENT, (D3D12_DESCRIPTOR_RANGE_TYPE)-1))