#pragma once
#include "../jRHIType.h"

GENERATE_CONVERSION_FUNCTION(GetVulkanTextureFilterType,
    CONVERSION_TYPE_ELEMENT(ETextureFilter::NEAREST, VK_FILTER_NEAREST),
    CONVERSION_TYPE_ELEMENT(ETextureFilter::LINEAR, VK_FILTER_LINEAR),
    CONVERSION_TYPE_ELEMENT(ETextureFilter::NEAREST_MIPMAP_NEAREST, VK_FILTER_NEAREST),
    CONVERSION_TYPE_ELEMENT(ETextureFilter::LINEAR_MIPMAP_NEAREST, VK_FILTER_LINEAR),
    CONVERSION_TYPE_ELEMENT(ETextureFilter::NEAREST_MIPMAP_LINEAR, VK_FILTER_NEAREST),
    CONVERSION_TYPE_ELEMENT(ETextureFilter::LINEAR_MIPMAP_LINEAR, VK_FILTER_LINEAR))

GENERATE_CONVERSION_FUNCTION(GetVulkanTextureAddressMode,
    CONVERSION_TYPE_ELEMENT(ETextureAddressMode::REPEAT, VK_SAMPLER_ADDRESS_MODE_REPEAT),
    CONVERSION_TYPE_ELEMENT(ETextureAddressMode::MIRRORED_REPEAT, VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT),
    CONVERSION_TYPE_ELEMENT(ETextureAddressMode::CLAMP_TO_EDGE, VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE),
    CONVERSION_TYPE_ELEMENT(ETextureAddressMode::CLAMP_TO_BORDER, VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER),
    CONVERSION_TYPE_ELEMENT(ETextureAddressMode::MIRROR_CLAMP_TO_EDGE, VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE))

GENERATE_CONVERSION_FUNCTION(GetVulkanTextureMipmapMode,
    CONVERSION_TYPE_ELEMENT(ETextureFilter::NEAREST, VK_SAMPLER_MIPMAP_MODE_NEAREST),
    CONVERSION_TYPE_ELEMENT(ETextureFilter::LINEAR, VK_SAMPLER_MIPMAP_MODE_NEAREST),
    CONVERSION_TYPE_ELEMENT(ETextureFilter::NEAREST_MIPMAP_NEAREST, VK_SAMPLER_MIPMAP_MODE_NEAREST),
    CONVERSION_TYPE_ELEMENT(ETextureFilter::LINEAR_MIPMAP_NEAREST, VK_SAMPLER_MIPMAP_MODE_NEAREST),
    CONVERSION_TYPE_ELEMENT(ETextureFilter::NEAREST_MIPMAP_LINEAR, VK_SAMPLER_MIPMAP_MODE_LINEAR),
    CONVERSION_TYPE_ELEMENT(ETextureFilter::LINEAR_MIPMAP_LINEAR, VK_SAMPLER_MIPMAP_MODE_LINEAR))

GENERATE_CONVERSION_FUNCTION(GetVulkanTextureFormat,
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB8, VK_FORMAT_R8G8B8_UNORM),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB32F, VK_FORMAT_R32G32B32_SFLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB16F, VK_FORMAT_R16G16B16_SFLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::R11G11B10F, VK_FORMAT_B10G11R11_UFLOAT_PACK32),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8, VK_FORMAT_R8G8B8A8_UNORM),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA16F, VK_FORMAT_R16G16B16A16_SFLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA32F, VK_FORMAT_R32G32B32A32_SFLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8I, VK_FORMAT_R8G8B8A8_SINT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8UI, VK_FORMAT_R8G8B8A8_UINT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::BGRA8, VK_FORMAT_B8G8R8A8_UNORM),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::R8, VK_FORMAT_R8_UNORM),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::R16F, VK_FORMAT_R16_SFLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::R32F, VK_FORMAT_R32_SFLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::R32UI, VK_FORMAT_R32_UINT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RG8, VK_FORMAT_R8G8_UNORM),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RG16F, VK_FORMAT_R16G16_SFLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::RG32F, VK_FORMAT_R32G32_SFLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::D16, VK_FORMAT_D16_UNORM),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::D16_S8, VK_FORMAT_D16_UNORM_S8_UINT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::D24, VK_FORMAT_X8_D24_UNORM_PACK32),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::D24_S8, VK_FORMAT_D24_UNORM_S8_UINT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::D32, VK_FORMAT_D32_SFLOAT),
    CONVERSION_TYPE_ELEMENT(ETextureFormat::D32_S8, VK_FORMAT_D32_SFLOAT_S8_UINT))

FORCEINLINE auto GetVulkanTextureComponentCount(ETextureFormat type)
{
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB8, 3),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB32F, 3),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB16F, 3),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R11G11B10F, 3),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA16F, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA32F, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8I, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8UI, 4),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::BGRA8, 4),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::R8, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R16F, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R32F, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R32UI, 1),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::RG8, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RG16F, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RG32F, 2),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::D16, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D16_S8, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D24, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D24_S8, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D32, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D32_S8, 2)
    );
}

FORCEINLINE void GetVulkanAttachmentLoadStoreOp(VkAttachmentLoadOp& OutLoadOp, VkAttachmentStoreOp& OutStoreOp, EAttachmentLoadStoreOp InType)
{
    switch (InType)
    {
    case EAttachmentLoadStoreOp::LOAD_STORE:
        OutLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD;
        OutStoreOp = VK_ATTACHMENT_STORE_OP_STORE;
        break;
    case EAttachmentLoadStoreOp::LOAD_DONTCARE:
        OutLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD;
        OutStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE;
        break;
    case EAttachmentLoadStoreOp::CLEAR_STORE:
        OutLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR;
        OutStoreOp = VK_ATTACHMENT_STORE_OP_STORE;
        break;
    case EAttachmentLoadStoreOp::CLEAR_DONTCARE:
        OutLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR;
        OutStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE;
        break;
    case EAttachmentLoadStoreOp::DONTCARE_STORE:
        OutLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE;
        OutStoreOp = VK_ATTACHMENT_STORE_OP_STORE;
        break;
    case EAttachmentLoadStoreOp::DONTCARE_DONTCARE:
        OutLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE;
        OutStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE;
        break;
    case EAttachmentLoadStoreOp::MAX:
    default:
        check(0);
        break;
    }
}

FORCEINLINE auto GetVulkanShaderAccessFlags(EShaderAccessStageFlag type)
{
    switch (type)
    {
    case EShaderAccessStageFlag::VERTEX:
        return VK_SHADER_STAGE_VERTEX_BIT;
    case EShaderAccessStageFlag::TESSELLATION_CONTROL:
        return VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT;
    case EShaderAccessStageFlag::TESSELLATION_EVALUATION:
        return VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT;
    case EShaderAccessStageFlag::GEOMETRY:
        return VK_SHADER_STAGE_GEOMETRY_BIT;
    case EShaderAccessStageFlag::FRAGMENT:
        return VK_SHADER_STAGE_FRAGMENT_BIT;
    case EShaderAccessStageFlag::COMPUTE:
        return VK_SHADER_STAGE_COMPUTE_BIT;
    case EShaderAccessStageFlag::ALL_GRAPHICS:
        return VK_SHADER_STAGE_ALL_GRAPHICS;
    case EShaderAccessStageFlag::ALL:
        return VK_SHADER_STAGE_ALL;
    default:
        check(0);
        break;
    }
    return VK_SHADER_STAGE_ALL;
}

GENERATE_CONVERSION_FUNCTION(GetVulkanPrimitiveTopology,
    CONVERSION_TYPE_ELEMENT(EPrimitiveType::POINTS, VK_PRIMITIVE_TOPOLOGY_POINT_LIST),
    CONVERSION_TYPE_ELEMENT(EPrimitiveType::LINES, VK_PRIMITIVE_TOPOLOGY_LINE_LIST),
    CONVERSION_TYPE_ELEMENT(EPrimitiveType::LINES_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY),
    CONVERSION_TYPE_ELEMENT(EPrimitiveType::LINE_STRIP_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_LINE_STRIP),
    CONVERSION_TYPE_ELEMENT(EPrimitiveType::TRIANGLES, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST),
    CONVERSION_TYPE_ELEMENT(EPrimitiveType::TRIANGLES_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY),
    CONVERSION_TYPE_ELEMENT(EPrimitiveType::TRIANGLE_STRIP_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY),
    CONVERSION_TYPE_ELEMENT(EPrimitiveType::TRIANGLE_STRIP, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP))

GENERATE_CONVERSION_FUNCTION(GetVulkanVertexInputRate,
    CONVERSION_TYPE_ELEMENT(EVertexInputRate::VERTEX, VK_VERTEX_INPUT_RATE_VERTEX),
    CONVERSION_TYPE_ELEMENT(EVertexInputRate::INSTANCE, VK_VERTEX_INPUT_RATE_INSTANCE))

GENERATE_CONVERSION_FUNCTION(GetVulkanPolygonMode,
    CONVERSION_TYPE_ELEMENT(EPolygonMode::POINT, VK_POLYGON_MODE_POINT),
    CONVERSION_TYPE_ELEMENT(EPolygonMode::LINE, VK_POLYGON_MODE_LINE),
    CONVERSION_TYPE_ELEMENT(EPolygonMode::FILL, VK_POLYGON_MODE_FILL))

GENERATE_CONVERSION_FUNCTION(GetVulkanCullMode,
    CONVERSION_TYPE_ELEMENT(ECullMode::NONE, VK_CULL_MODE_NONE),
    CONVERSION_TYPE_ELEMENT(ECullMode::BACK, VK_CULL_MODE_BACK_BIT),
    CONVERSION_TYPE_ELEMENT(ECullMode::FRONT, VK_CULL_MODE_FRONT_BIT),
    CONVERSION_TYPE_ELEMENT(ECullMode::FRONT_AND_BACK, VK_CULL_MODE_FRONT_AND_BACK))

GENERATE_CONVERSION_FUNCTION(GetVulkanFrontFace,
    CONVERSION_TYPE_ELEMENT(EFrontFace::CW, VK_FRONT_FACE_CLOCKWISE),
    CONVERSION_TYPE_ELEMENT(EFrontFace::CCW, VK_FRONT_FACE_COUNTER_CLOCKWISE))

GENERATE_CONVERSION_FUNCTION(GetVulkanStencilOp,
    CONVERSION_TYPE_ELEMENT(EStencilOp::KEEP, VK_STENCIL_OP_KEEP),
    CONVERSION_TYPE_ELEMENT(EStencilOp::ZERO, VK_STENCIL_OP_ZERO),
    CONVERSION_TYPE_ELEMENT(EStencilOp::REPLACE, VK_STENCIL_OP_REPLACE),
    CONVERSION_TYPE_ELEMENT(EStencilOp::INCR, VK_STENCIL_OP_INCREMENT_AND_CLAMP),
    CONVERSION_TYPE_ELEMENT(EStencilOp::INCR_WRAP, VK_STENCIL_OP_INCREMENT_AND_WRAP),
    CONVERSION_TYPE_ELEMENT(EStencilOp::DECR, VK_STENCIL_OP_DECREMENT_AND_CLAMP),
    CONVERSION_TYPE_ELEMENT(EStencilOp::DECR_WRAP, VK_STENCIL_OP_DECREMENT_AND_WRAP),
    CONVERSION_TYPE_ELEMENT(EStencilOp::INVERT, VK_STENCIL_OP_INVERT))

GENERATE_CONVERSION_FUNCTION(GetVulkanCompareOp,
    CONVERSION_TYPE_ELEMENT(ECompareOp::NEVER, VK_COMPARE_OP_NEVER),
    CONVERSION_TYPE_ELEMENT(ECompareOp::LESS, VK_COMPARE_OP_LESS),
    CONVERSION_TYPE_ELEMENT(ECompareOp::EQUAL, VK_COMPARE_OP_EQUAL),
    CONVERSION_TYPE_ELEMENT(ECompareOp::LEQUAL, VK_COMPARE_OP_LESS_OR_EQUAL),
    CONVERSION_TYPE_ELEMENT(ECompareOp::GREATER, VK_COMPARE_OP_GREATER),
    CONVERSION_TYPE_ELEMENT(ECompareOp::NOTEQUAL, VK_COMPARE_OP_NOT_EQUAL),
    CONVERSION_TYPE_ELEMENT(ECompareOp::GEQUAL, VK_COMPARE_OP_GREATER_OR_EQUAL),
    CONVERSION_TYPE_ELEMENT(ECompareOp::ALWAYS, VK_COMPARE_OP_ALWAYS))

GENERATE_CONVERSION_FUNCTION(GetVulkanBlendFactor,
    CONVERSION_TYPE_ELEMENT(EBlendFactor::ZERO, VK_BLEND_FACTOR_ZERO),
    CONVERSION_TYPE_ELEMENT(EBlendFactor::ONE, VK_BLEND_FACTOR_ONE),
    CONVERSION_TYPE_ELEMENT(EBlendFactor::SRC_COLOR, VK_BLEND_FACTOR_SRC_COLOR),
    CONVERSION_TYPE_ELEMENT(EBlendFactor::ONE_MINUS_SRC_COLOR, VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR),
    CONVERSION_TYPE_ELEMENT(EBlendFactor::DST_COLOR, VK_BLEND_FACTOR_DST_COLOR),
    CONVERSION_TYPE_ELEMENT(EBlendFactor::ONE_MINUS_DST_COLOR, VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR),
    CONVERSION_TYPE_ELEMENT(EBlendFactor::SRC_ALPHA, VK_BLEND_FACTOR_SRC_ALPHA),
    CONVERSION_TYPE_ELEMENT(EBlendFactor::ONE_MINUS_SRC_ALPHA, VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA),
    CONVERSION_TYPE_ELEMENT(EBlendFactor::DST_ALPHA, VK_BLEND_FACTOR_DST_ALPHA),
    CONVERSION_TYPE_ELEMENT(EBlendFactor::ONE_MINUS_DST_ALPHA, VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA),
    CONVERSION_TYPE_ELEMENT(EBlendFactor::CONSTANT_COLOR, VK_BLEND_FACTOR_CONSTANT_COLOR),
    CONVERSION_TYPE_ELEMENT(EBlendFactor::ONE_MINUS_CONSTANT_COLOR, VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR),
    CONVERSION_TYPE_ELEMENT(EBlendFactor::CONSTANT_ALPHA, VK_BLEND_FACTOR_CONSTANT_ALPHA),
    CONVERSION_TYPE_ELEMENT(EBlendFactor::ONE_MINUS_CONSTANT_ALPHA, VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA),
    CONVERSION_TYPE_ELEMENT(EBlendFactor::SRC_ALPHA_SATURATE, VK_BLEND_FACTOR_SRC_ALPHA_SATURATE))

GENERATE_CONVERSION_FUNCTION(GetVulkanBlendOp,
    CONVERSION_TYPE_ELEMENT(EBlendOp::ADD, VK_BLEND_OP_ADD),
    CONVERSION_TYPE_ELEMENT(EBlendOp::SUBTRACT, VK_BLEND_OP_SUBTRACT),
    CONVERSION_TYPE_ELEMENT(EBlendOp::REVERSE_SUBTRACT, VK_BLEND_OP_REVERSE_SUBTRACT),
    CONVERSION_TYPE_ELEMENT(EBlendOp::MIN_VALUE, VK_BLEND_OP_MIN),
    CONVERSION_TYPE_ELEMENT(EBlendOp::MAX_VALUE, VK_BLEND_OP_MAX))

GENERATE_CONVERSION_FUNCTION(GetVulkanImageLayout,
    CONVERSION_TYPE_ELEMENT(EImageLayout::UNDEFINED, VK_IMAGE_LAYOUT_UNDEFINED),
    CONVERSION_TYPE_ELEMENT(EImageLayout::GENERAL, VK_IMAGE_LAYOUT_GENERAL),
    CONVERSION_TYPE_ELEMENT(EImageLayout::COLOR_ATTACHMENT, VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL),
    CONVERSION_TYPE_ELEMENT(EImageLayout::DEPTH_STENCIL_ATTACHMENT, VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL),
    CONVERSION_TYPE_ELEMENT(EImageLayout::DEPTH_STENCIL_READ_ONLY, VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL),
    CONVERSION_TYPE_ELEMENT(EImageLayout::SHADER_READ_ONLY, VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL),
    CONVERSION_TYPE_ELEMENT(EImageLayout::TRANSFER_SRC, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL),
    CONVERSION_TYPE_ELEMENT(EImageLayout::TRANSFER_DST, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL),
    CONVERSION_TYPE_ELEMENT(EImageLayout::PREINITIALIZED, VK_IMAGE_LAYOUT_PREINITIALIZED),
    CONVERSION_TYPE_ELEMENT(EImageLayout::DEPTH_READ_ONLY_STENCIL_ATTACHMENT, VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL),
    CONVERSION_TYPE_ELEMENT(EImageLayout::DEPTH_ATTACHMENT_STENCIL_READ_ONLY, VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL),
    CONVERSION_TYPE_ELEMENT(EImageLayout::DEPTH_ATTACHMENT, VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL),
    CONVERSION_TYPE_ELEMENT(EImageLayout::DEPTH_READ_ONLY, VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL),
    CONVERSION_TYPE_ELEMENT(EImageLayout::STENCIL_ATTACHMENT, VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL),
    CONVERSION_TYPE_ELEMENT(EImageLayout::STENCIL_READ_ONLY, VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL),
    CONVERSION_TYPE_ELEMENT(EImageLayout::PRESENT_SRC, VK_IMAGE_LAYOUT_PRESENT_SRC_KHR),
    CONVERSION_TYPE_ELEMENT(EImageLayout::SHARED_PRESENT, VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR),
    CONVERSION_TYPE_ELEMENT(EImageLayout::SHADING_RATE_NV, VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV),
    CONVERSION_TYPE_ELEMENT(EImageLayout::FRAGMENT_DENSITY_MAP_EXT, VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT),
    CONVERSION_TYPE_ELEMENT(EImageLayout::READ_ONLY, VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR),
    CONVERSION_TYPE_ELEMENT(EImageLayout::ATTACHMENT, VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR))

GENERATE_CONVERSION_FUNCTION(GetVulkanShaderBindingType,
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::UNIFORMBUFFER, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::UNIFROMBUFFER_DYNAMIC, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::TEXTURE_SAMPLER_SRV, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::TEXTURE_SRV, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::TEXTURE_UAV, VK_DESCRIPTOR_TYPE_STORAGE_IMAGE),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLER),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::BUFFER_UAV, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::BUFFER_UAV_DYNAMIC, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::BUFFER_TEXEL_SRV, VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::BUFFER_TEXEL_UAV, VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER),
    CONVERSION_TYPE_ELEMENT(EShaderBindingType::SUBPASS_INPUT_ATTACHMENT, VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT))

FORCEINLINE auto GetVulkanBufferBits(EVulkanBufferBits type)
{
    switch (type)
    {
    case EVulkanBufferBits::TRANSFER_SRC:
        return VK_BUFFER_USAGE_TRANSFER_SRC_BIT;
    case EVulkanBufferBits::TRANSFER_DST:
        return VK_BUFFER_USAGE_TRANSFER_DST_BIT;
    case EVulkanBufferBits::UNIFORM_TEXEL_BUFFER:
        return VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT;
    case EVulkanBufferBits::STORAGE_TEXEL_BUFFER:
        return VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT;
    case EVulkanBufferBits::UNIFORM_BUFFER:
        return VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT;
    case EVulkanBufferBits::STORAGE_BUFFER:
        return VK_BUFFER_USAGE_STORAGE_BUFFER_BIT;
    case EVulkanBufferBits::INDEX_BUFFER:
        return VK_BUFFER_USAGE_INDEX_BUFFER_BIT;
    case EVulkanBufferBits::VERTEX_BUFFER:
        return VK_BUFFER_USAGE_VERTEX_BUFFER_BIT;
    case EVulkanBufferBits::INDIRECT_BUFFER:
        return VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT;
    case EVulkanBufferBits::SHADER_DEVICE_ADDRESS:
        return VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT;
    case EVulkanBufferBits::TRANSFORM_FEEDBACK_BUFFER:
        return VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT;
    case EVulkanBufferBits::TRANSFORM_FEEDBACK_COUNTER_BUFFER:
        return VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT;
    case EVulkanBufferBits::CONDITIONAL_RENDERING:
        return VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT;
    case EVulkanBufferBits::ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY:
        return VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR;
    case EVulkanBufferBits::ACCELERATION_STRUCTURE_STORAGE:
        return VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR;
    case EVulkanBufferBits::SHADER_BINDING_TABLE:
        return VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR;
    default:
        check(0);
        break;
    }
    return VK_BUFFER_USAGE_TRANSFER_SRC_BIT;
}

FORCEINLINE VkColorComponentFlags GetVulkanBlendOp(EColorMask type)
{
    VkColorComponentFlags result = 0;

    if (EColorMask::NONE == type)
        return result;

    if (EColorMask::ALL == type)
    {
        result = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT
            | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
    }
    else
    {
        if (!!(EColorMask::R & type)) result |= VK_COLOR_COMPONENT_R_BIT;
        if (!!(EColorMask::G & type)) result |= VK_COLOR_COMPONENT_G_BIT;
        if (!!(EColorMask::B & type)) result |= VK_COLOR_COMPONENT_B_BIT;
        if (!!(EColorMask::A & type)) result |= VK_COLOR_COMPONENT_A_BIT;
    }
    return result;
}

FORCEINLINE VkPipelineStageFlagBits GetPipelineStageMask(EPipelineStageMask type)
{
    switch (type)
    {
        case EPipelineStageMask::NONE:                                  return VK_PIPELINE_STAGE_NONE;
        case EPipelineStageMask::TOP_OF_PIPE_BIT:                       return VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;
        case EPipelineStageMask::DRAW_INDIRECT_BIT:                     return VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT;
        case EPipelineStageMask::VERTEX_INPUT_BIT:                      return VK_PIPELINE_STAGE_VERTEX_INPUT_BIT;
        case EPipelineStageMask::VERTEX_SHADER_BIT:                     return VK_PIPELINE_STAGE_VERTEX_SHADER_BIT;
        case EPipelineStageMask::TESSELLATION_CONTROL_SHADER_BIT:       return VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT;
        case EPipelineStageMask::TESSELLATION_EVALUATION_SHADER_BIT:    return VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT;
        case EPipelineStageMask::GEOMETRY_SHADER_BIT:                   return VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT;
        case EPipelineStageMask::FRAGMENT_SHADER_BIT:                   return VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;
        case EPipelineStageMask::EARLY_FRAGMENT_TESTS_BIT:              return VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT;
        case EPipelineStageMask::LATE_FRAGMENT_TESTS_BIT:               return VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT;
        case EPipelineStageMask::COLOR_ATTACHMENT_OUTPUT_BIT:           return VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
        case EPipelineStageMask::COMPUTE_SHADER_BIT:                    return VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT;
        case EPipelineStageMask::TRANSFER_BIT:                          return VK_PIPELINE_STAGE_TRANSFER_BIT;
        case EPipelineStageMask::BOTTOM_OF_PIPE_BIT:                    return VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT;
        case EPipelineStageMask::HOST_BIT:                              return VK_PIPELINE_STAGE_HOST_BIT;
        case EPipelineStageMask::ALL_GRAPHICS_BIT:                      return VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT;
        case EPipelineStageMask::ALL_COMMANDS_BIT:                      return VK_PIPELINE_STAGE_ALL_COMMANDS_BIT;
    }

    check(0);
    return VK_PIPELINE_STAGE_NONE;
}